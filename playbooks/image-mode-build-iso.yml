---
- name: RH1 Demo | Build RHEL Image Mode container
  hosts: build_host
  tasks:
    - name: RH1 Demo | Set working directory
      ansible.builtin.set_fact:
        workdir: "/home/{{ ansible_user }}/rhel-image-mode"
        image_tag: app

    - name: RH1 Demo | Login to registry
      containers.podman.podman_login:
        registry: "{{ rhel_image_mode_registry_url }}"
        username: "{{ rhel_image_mode_registry_username }}"
        password: "{{ rhel_image_mode_registry_password }}"

    - name: RH1 Demo | Generate output folder for resulting image
      ansible.builtin.file:
        path: "{{ workdir }}/output"
        state: directory

    - name: RH1 Demo | Get stats of the FS object
      ansible.builtin.stat:
        path: "{{ workdir }}/output/bootiso/install.iso"
      register: qcow_image


    - name: RH1 Demo | Upload kickstart file to file server
      become: true
      ansible.builtin.copy:
        content: |
          [customizations.installer.kickstart]
          contents = """
          reboot
          network --bootproto=dhcp
          zerombr
          clearpart --all --initlabel --disklabel=gpt
          part biosboot  --size=1    --fstype=biosboot
          part /boot --size=1024 --fstype=ext4 --label=boot
          part /boot/efi --size=100  --fstype=efi
          part / --size=1000 --fstype=xfs --grow
          keyboard us
          lang en_US
          timezone Europe/Rome
          rootpw redhat
          %post
          cat << EOF >> /home/bootc-user/load_application_data.sh
          sudo mysql -uroot -e "CREATE DATABASE petclinic"
          sudo mysql -uroot petclinic < /tmp/petclinic.sql
          sudo systemctl restart petclinic
          EOF
          chown bootc-user:bootc-user /home/bootc-user/load_application_data.sh
          chmod 755 /home/bootc-user/load_application_data.sh
          %end
          ostreecontainer --no-signature-verification  --url={{ rhel_image_mode_registry_url }}/{{ rhel_image_mode_registry_username }}/rhel-image-mode-demo:{{ image_tag }}
          """
        dest: "{{ workdir }}/config.toml"


    - name: RH1 Demo | Generate ISO Image with bootc-image-builder
      become: true
      when: not qcow_image.stat.exists
      containers.podman.podman_container:
        name: bootc-image-builder
        image: registry.redhat.io/rhel9/bootc-image-builder:latest
        privileged: true
        remove: true
        pull: newer
        security_opt:
          - label=type:unconfined_t
        state: started
        volumes:
          - "/var/lib/containers/storage:/var/lib/containers/storage"
          - "{{ workdir }}/config.toml:/config.toml"
          - "{{ workdir }}/output:/output"
        command: "--type iso --config /config.toml --tls-verify=false {{ rhel_image_mode_registry_url }}/{{ rhel_image_mode_registry_username }}/rhel-image-mode-demo:{{ image_tag }}"

    - name: RH1 Demo | Wait for image to be generated. It can take a while.
      ansible.builtin.wait_for:
        path: "{{ workdir }}/output/bootiso/install.iso"
        state: present
        timeout: 10000

    - name: RH1 Demo | Fix permissions
      become: true
      ansible.builtin.file:
        path: "{{ workdir }}"
        state: directory
        recurse: true
        mode: "0755"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

- name: RH1 Demo | Publish ISO and Kickstart
  hosts: webserver
  tasks:
    - name: RH1 Demo | Set working directory
      ansible.builtin.set_fact:
        workdir: "/home/{{ ansible_user }}/rhel-image-mode"
        image_tag: app

    - name: RH1 Demo | Upload ISO file to file server
      become: true
      ansible.posix.synchronize:
        src: "{{ workdir }}/output/bootiso/install.iso"
        dest: /var/www/html/bootc/rhel9.iso
      delegate_to: "{{ groups['build_host'][0] }}"

    # - name: RH1 Demo | Cleanup local working directory
    #   ansible.builtin.file:
    #     path: "{{ workdir }}/image-repo"
    #     state: absent
